# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
    username: String!
  ): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  createCard(
    whatWasLearned: String!
    tags: [RotationTags]!
    taggedUser: [ID]!
    myCreatedAt: DateTime!
  ): Presentation!
  createPresentation(
    presentationType: PresentationTypes!
    hpi: String!
    physicalExam: String!
    summAssessment: String!
    ddx: [String]!
    tags: [RotationTags]!
    whatWasLearned: String!
    taggedUser: [ID]!
    myCreatedAt: DateTime!
  ): Presentation!
  updatePresentation(
    id: ID!
    presentationType: PresentationTypes!
    hpi: String!
    physicalExam: String!
    summAssessment: String!
    ddx: [String]!
    tags: [RotationTags]!
    whatWasLearned: String!
    taggedUser: [ID]!
    createdBy: ID!
    myCreatedAt: DateTime!
  ): Presentation!
  likePresentation(id: ID!, addLike: Boolean!): Presentation
  deletePresentation(id: ID!): Presentation
  batchLoadPresentation(
    presentationType: PresentationTypes!
    hpi: String!
    physicalExam: String!
    summAssessment: String!
    ddx: [String]!
    tags: [RotationTags]!
    whatWasLearned: String!
    taggedUser: [ID]!
    createdBy: String!
    myCreatedAt: DateTime!
  ): Presentation!
  batchLoadLearning(
    presentationType: PresentationTypes!
    tags: [RotationTags]!
    whatWasLearned: String!
    taggedUser: [ID]!
    createdBy: String!
    myCreatedAt: DateTime!
  ): Presentation!
  deleteAllPresentations(presentationType: PresentationTypes!): Presentation
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
  users: [User]!
  presentation(where: PresentationWhereUniqueInput!): Presentation
  presentations(
    where: PresentationWhereInput
    orderBy: PresentationOrderByInput
    first: Int
    skip: Int
  ): [Presentation]!
}
